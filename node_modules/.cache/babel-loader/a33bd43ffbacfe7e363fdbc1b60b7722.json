{"ast":null,"code":"var _jsxFileName = \"/Users/fdrennan/WebstormProjects/newStockAPI/src/DataTable.js\";\nimport React from \"react\";\nimport { useFetch } from \"./hooks\";\nimport { CSVLink } from \"react-csv\"; // const PORT = 6287;\n// let baseUrl = `http://127.0.0.1:${PORT}/get_stocks_data?stocks=[\"${'AAPL'}\"]&startDate=${'2019-01-01'}&endDate=${'2019-02-01'}`;\n\nfunction DataTable(props) {\n  var _useFetch = useFetch(props.baseUrl, {}),\n      message = _useFetch.message,\n      data = _useFetch.data;\n\n  var cleanData = function cleanData(data) {\n    if (data) {\n      var dataMap = JSON.parse(data).map(function (x) {\n        return React.createElement(\"tr\", {\n          key: x.date,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          key: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, x.date), React.createElement(\"td\", {\n          key: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, x.open), React.createElement(\"td\", {\n          key: 3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }, x.high), React.createElement(\"td\", {\n          key: 4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, x.low), React.createElement(\"td\", {\n          key: 5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, x.close), React.createElement(\"td\", {\n          key: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, x.volume), React.createElement(\"td\", {\n          key: 7,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, x.adjusted));\n      });\n      return React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Open\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"High\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Low\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"Close\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Volume\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Adjusted\")), dataMap));\n    }\n  };\n\n  var json2array = function json2array(json) {\n    var result = [];\n    var keys = Object.keys(json);\n    keys.forEach(function (key) {\n      result.push(json[key]);\n    });\n    return result;\n  };\n\n  var jsonToCSV = function jsonToCSV(data) {\n    if (data) {\n      var returnedData = JSON.parse(data);\n      return json2array(returnedData);\n    }\n  };\n\n  var parsedData = cleanData(data);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"em\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, message)), data ? React.createElement(CSVLink, {\n    data: jsonToCSV(data),\n    filename: \"stock-data.csv\",\n    target: \"data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Download Me\") : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Is the API up and running?\"), parsedData);\n}\n\nexport default DataTable;","map":{"version":3,"sources":["/Users/fdrennan/WebstormProjects/newStockAPI/src/DataTable.js"],"names":["React","useFetch","CSVLink","DataTable","props","baseUrl","message","data","cleanData","dataMap","JSON","parse","map","x","date","open","high","low","close","volume","adjusted","json2array","json","result","keys","Object","forEach","key","push","jsonToCSV","returnedData","parsedData"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useFetch } from \"./hooks\";\nimport { CSVLink } from \"react-csv\";\n// const PORT = 6287;\n// let baseUrl = `http://127.0.0.1:${PORT}/get_stocks_data?stocks=[\"${'AAPL'}\"]&startDate=${'2019-01-01'}&endDate=${'2019-02-01'}`;\n\nfunction DataTable(props) {\n  const { message, data } = useFetch(props.baseUrl, {});\n\n  const cleanData = data => {\n    if (data) {\n      const dataMap = JSON.parse(data).map(x => {\n        return (\n          <tr key={x.date}>\n            <td key={1}>{x.date}</td>\n            <td key={2}>{x.open}</td>\n            <td key={3}>{x.high}</td>\n            <td key={4}>{x.low}</td>\n            <td key={5}>{x.close}</td>\n            <td key={6}>{x.volume}</td>\n            <td key={7}>{x.adjusted}</td>\n          </tr>\n        );\n      });\n\n      return (\n        <table>\n          <tbody>\n            <tr>\n              <td>Date</td>\n              <td>Open</td>\n              <td>High</td>\n              <td>Low</td>\n              <td>Close</td>\n              <td>Volume</td>\n              <td>Adjusted</td>\n            </tr>\n            {dataMap}\n          </tbody>\n        </table>\n      );\n    }\n  };\n\n  const json2array = json => {\n    let result = [];\n    let keys = Object.keys(json);\n    keys.forEach(function(key) {\n      result.push(json[key]);\n    });\n    return result;\n  };\n\n  const jsonToCSV = data => {\n    if (data) {\n      const returnedData = JSON.parse(data);\n      return json2array(returnedData);\n    }\n  };\n\n  const parsedData = cleanData(data);\n\n  return (\n    <div>\n        <p>\n            <em>{message}</em>\n        </p>\n      {data ? (\n        <CSVLink\n          data={jsonToCSV(data)}\n          filename={\"stock-data.csv\"}\n          target=\"data\"\n        >\n          Download Me\n        </CSVLink>\n      ) : (\n        <p>Is the API up and running?</p>\n      )}\n      {parsedData}\n    </div>\n  );\n}\n\nexport default DataTable;\n"]},"metadata":{},"sourceType":"module"}