{"ast":null,"code":"var _jsxFileName = \"/Users/fdrennan/WebstormProjects/newStockAPI/src/DataTable.js\";\nimport React from 'react';\nimport { useFetch } from './hooks';\nimport { CSVLink } from \"react-csv\"; // const PORT = 6287;\n// let baseUrl = `http://127.0.0.1:${PORT}/get_stocks_data?stocks=[\"${'AAPL'}\"]&startDate=${'2019-01-01'}&endDate=${'2019-02-01'}`;\n\nfunction DataTable(props) {\n  var _useFetch = useFetch(props.baseUrl, {}),\n      message = _useFetch.message,\n      data = _useFetch.data;\n\n  var cleanData = function cleanData(data) {\n    if (data) {\n      var dataMap = JSON.parse(data).map(function (x) {\n        return React.createElement(\"tr\", {\n          key: x.date,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          key: 1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, x.date), React.createElement(\"td\", {\n          key: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, x.open), React.createElement(\"td\", {\n          key: 3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }, x.high), React.createElement(\"td\", {\n          key: 4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, x.low), React.createElement(\"td\", {\n          key: 5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, x.close), React.createElement(\"td\", {\n          key: 6,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, x.volume), React.createElement(\"td\", {\n          key: 7,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, x.adjusted));\n      });\n      return React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Open\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"High\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Low\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Close\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Volume\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Adjusted\")), dataMap));\n    }\n  };\n\n  var json2array = function json2array(json) {\n    var result = [];\n    var keys = Object.keys(json);\n    keys.forEach(function (key) {\n      result.push(json[key]);\n    });\n    return result;\n  };\n\n  var jsonToCSV = function jsonToCSV(data) {\n    if (data) {\n      var returnedData = JSON.parse(data);\n      return json2array(returnedData);\n    }\n  };\n\n  var parsedData = cleanData(data);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"MetaData\"), data ? React.createElement(CSVLink, {\n    data: jsonToCSV(data),\n    filename: \"stock-data.csv\",\n    target: \"data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Download Me\") : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Missing\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"em\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, message)), parsedData);\n}\n\nexport default DataTable;","map":{"version":3,"sources":["/Users/fdrennan/WebstormProjects/newStockAPI/src/DataTable.js"],"names":["React","useFetch","CSVLink","DataTable","props","baseUrl","message","data","cleanData","dataMap","JSON","parse","map","x","date","open","high","low","close","volume","adjusted","json2array","json","result","keys","Object","forEach","key","push","jsonToCSV","returnedData","parsedData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useFetch } from './hooks';\nimport {CSVLink} from \"react-csv\";\n\n\n// const PORT = 6287;\n\n// let baseUrl = `http://127.0.0.1:${PORT}/get_stocks_data?stocks=[\"${'AAPL'}\"]&startDate=${'2019-01-01'}&endDate=${'2019-02-01'}`;\n\nfunction DataTable(props) {\n\n  const { message, data } = useFetch(props.baseUrl, {});\n\n  const cleanData = data => {\n    if (data) {\n        const dataMap =  (\n            JSON.parse(data).map(\n                (x) => {\n                    return (\n                                <tr key={x.date}>\n                                    <td key={1}>{x.date}</td>\n                                    <td key={2}>{x.open}</td>\n                                    <td key={3}>{x.high}</td>\n                                    <td key={4}>{x.low}</td>\n                                    <td key={5}>{x.close}</td>\n                                    <td key={6}>{x.volume}</td>\n                                    <td key={7}>{x.adjusted}</td>\n                                </tr>\n\n                    )\n                }\n            )\n        );\n\n        return (\n\n                <table>\n                    <tbody>\n                    <tr>\n                        <td>Date</td>\n                        <td>Open</td>\n                        <td>High</td>\n                        <td>Low</td>\n                        <td>Close</td>\n                        <td>Volume</td>\n                        <td>Adjusted</td>\n                    </tr>\n                     {dataMap}\n                    </tbody>\n                </table>\n\n        );\n    }\n  };\n\n  const json2array = json => {\n        var result = [];\n        var keys = Object.keys(json);\n        keys.forEach(function(key){\n            result.push(json[key]);\n        });\n        return result;\n    };\n\n  const jsonToCSV = data => {\n    if(data) {\n        const returnedData = JSON.parse(data);\n        return json2array(returnedData);\n    }\n  };\n\n  const parsedData = cleanData(data);\n\n  return (\n    <div>\n      <h3>MetaData</h3>\n        {data ? <CSVLink data={jsonToCSV(data)}\n                         filename={\"stock-data.csv\"}\n                         target=\"data\">Download Me</CSVLink> : <p>Missing</p>}\n        <p><em>{message}</em></p>\n        {parsedData}\n    </div>\n  )\n}\n\nexport default DataTable;\n"]},"metadata":{},"sourceType":"module"}